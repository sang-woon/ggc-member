// Enhanced Real-time Notification System with WebSocket-style Features
Object.assign(window.app, {
    // Í≥†Í∏â Ïã§ÏãúÍ∞Ñ ÏïåÎ¶º ÏãúÏä§ÌÖú
    advancedNotificationSystem: {
        // Ïó∞Í≤∞ ÏÉÅÌÉú
        connectionStatus: {
            connected: false,
            reconnecting: false,
            lastHeartbeat: null,
            reconnectAttempts: 0,
            maxReconnectAttempts: 5
        },

        // ÏïåÎ¶º ÌÅê Î∞è ÌûàÏä§ÌÜ†Î¶¨
        notificationQueue: [],
        notificationHistory: [],
        unreadCount: 0,
        maxHistorySize: 50,

        // ÏïåÎ¶º ÏÑ§Ï†ï
        settings: {
            enableSound: true,
            enableVibration: true,
            enableDesktop: true,
            autoMarkRead: false,
            displayDuration: 5000
        },

        // Ï¥àÍ∏∞Ìôî
        initialize: function() {
            this.setupEventListeners();
            this.requestDesktopPermission();
            this.startConnectionMonitoring();
            this.loadSettings();
            console.log('üîî Advanced Notification System initialized');
        },

        // Ïó∞Í≤∞ Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏûë
        startConnectionMonitoring: function() {
            this.connectionStatus.connected = true;
            this.startHeartbeat();
            this.simulateRealTimeEvents();
        },

        // ÌïòÌä∏ÎπÑÌä∏ ÏãúÏûë
        startHeartbeat: function() {
            setInterval(() => {
                this.connectionStatus.lastHeartbeat = new Date();
                // Í∞ÄÎÅî Ïó∞Í≤∞ ÎÅäÏñ¥Ïßê ÏãúÎÆ¨Î†àÏù¥ÏÖò
                if (Math.random() < 0.05) { // 5% ÌôïÎ•†
                    this.simulateConnectionLoss();
                }
            }, 30000); // 30Ï¥àÎßàÎã§
        },

        // Ïã§ÏãúÍ∞Ñ Ïù¥Î≤§Ìä∏ ÏãúÎÆ¨Î†àÏù¥ÏÖò
        simulateRealTimeEvents: function() {
            // ÏÉà ÎØºÏõê ÏïåÎ¶º
            setInterval(() => {
                if (this.connectionStatus.connected && Math.random() < 0.3) {
                    this.addNotification({
                        type: 'complaint_new',
                        priority: 'normal',
                        title: 'ÏÉàÎ°úÏö¥ ÎØºÏõê Ï†ëÏàò',
                        message: this.generateComplaintMessage(),
                        icon: 'fa-comment-alt',
                        color: 'blue',
                        actions: [
                            { text: 'ÌôïÏù∏', action: 'viewComplaint' },
                            { text: 'Î¨¥Ïãú', action: 'dismiss' }
                        ]
                    });
                }
            }, 45000); // 45Ï¥àÎßàÎã§ Ï≤¥ÌÅ¨

            // Í∏¥Í∏â ÎØºÏõê ÏïåÎ¶º
            setInterval(() => {
                if (this.connectionStatus.connected && Math.random() < 0.1) {
                    this.addNotification({
                        type: 'complaint_urgent',
                        priority: 'high',
                        title: 'üö® Í∏¥Í∏â ÎØºÏõê Î∞úÏÉù',
                        message: 'Ï¶âÏãú Ï≤òÎ¶¨Í∞Ä ÌïÑÏöîÌïú ÎØºÏõêÏù¥ Ï†ëÏàòÎêòÏóàÏäµÎãàÎã§.',
                        icon: 'fa-exclamation-triangle',
                        color: 'red',
                        persistent: true,
                        actions: [
                            { text: 'Ï¶âÏãú Ï≤òÎ¶¨', action: 'handleUrgent' },
                            { text: 'ÏúÑÏûÑ', action: 'delegate' }
                        ]
                    });
                }
            }, 180000); // 3Î∂ÑÎßàÎã§ Ï≤¥ÌÅ¨

            // GPS ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏ ÏïåÎ¶º
            setInterval(() => {
                if (this.connectionStatus.connected && window.app.locationService?.isTracking && Math.random() < 0.4) {
                    this.addNotification({
                        type: 'location_update',
                        priority: 'low',
                        title: 'ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏',
                        message: 'ÏÉàÎ°úÏö¥ ÌôúÎèô ÏßÄÏó≠Ïù¥ Í∞êÏßÄÎêòÏóàÏäµÎãàÎã§.',
                        icon: 'fa-map-marker-alt',
                        color: 'green',
                        autoClose: true,
                        actions: [
                            { text: 'ÌôúÎèô Í∏∞Î°ù', action: 'recordActivity' }
                        ]
                    });
                }
            }, 120000); // 2Î∂ÑÎßàÎã§ Ï≤¥ÌÅ¨

            // ÏãúÏä§ÌÖú ÏÉÅÌÉú ÏïåÎ¶º
            setInterval(() => {
                if (this.connectionStatus.connected && Math.random() < 0.2) {
                    this.addNotification({
                        type: 'system_status',
                        priority: 'low',
                        title: 'ÏãúÏä§ÌÖú ÏÉÅÌÉú',
                        message: this.generateSystemMessage(),
                        icon: 'fa-cog',
                        color: 'gray',
                        autoClose: true
                    });
                }
            }, 300000); // 5Î∂ÑÎßàÎã§ Ï≤¥ÌÅ¨
        },

        // Ïó∞Í≤∞ ÎÅäÏñ¥Ïßê ÏãúÎÆ¨Î†àÏù¥ÏÖò
        simulateConnectionLoss: function() {
            this.connectionStatus.connected = false;
            this.connectionStatus.reconnecting = true;
            
            this.addNotification({
                type: 'connection_lost',
                priority: 'high',
                title: '‚ö†Ô∏è Ïó∞Í≤∞ ÎÅäÏñ¥Ïßê',
                message: 'ÏÑúÎ≤ÑÏôÄÏùò Ïó∞Í≤∞Ïù¥ ÎÅäÏñ¥Ï°åÏäµÎãàÎã§. Ïû¨Ïó∞Í≤∞ÏùÑ ÏãúÎèÑÌï©ÎãàÎã§.',
                icon: 'fa-wifi',
                color: 'orange',
                persistent: true
            });

            this.attemptReconnection();
        },

        // Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ
        attemptReconnection: function() {
            const reconnectDelay = Math.min(1000 * Math.pow(2, this.connectionStatus.reconnectAttempts), 30000);
            
            setTimeout(() => {
                this.connectionStatus.reconnectAttempts++;
                
                if (this.connectionStatus.reconnectAttempts <= this.connectionStatus.maxReconnectAttempts) {
                    // Ïû¨Ïó∞Í≤∞ ÏÑ±Í≥µ ÏãúÎÆ¨Î†àÏù¥ÏÖò (80% ÌôïÎ•†)
                    if (Math.random() < 0.8) {
                        this.onReconnectionSuccess();
                    } else {
                        this.attemptReconnection();
                    }
                } else {
                    this.onReconnectionFailed();
                }
            }, reconnectDelay);
        },

        // Ïû¨Ïó∞Í≤∞ ÏÑ±Í≥µ
        onReconnectionSuccess: function() {
            this.connectionStatus.connected = true;
            this.connectionStatus.reconnecting = false;
            this.connectionStatus.reconnectAttempts = 0;

            this.addNotification({
                type: 'connection_restored',
                priority: 'normal',
                title: '‚úÖ Ïó∞Í≤∞ Î≥µÍµ¨Îê®',
                message: 'ÏÑúÎ≤ÑÏôÄÏùò Ïó∞Í≤∞Ïù¥ Î≥µÍµ¨ÎêòÏóàÏäµÎãàÎã§.',
                icon: 'fa-wifi',
                color: 'green',
                autoClose: true
            });
        },

        // Ïû¨Ïó∞Í≤∞ Ïã§Ìå®
        onReconnectionFailed: function() {
            this.connectionStatus.reconnecting = false;
            
            this.addNotification({
                type: 'connection_failed',
                priority: 'high',
                title: '‚ùå Ïó∞Í≤∞ Ïã§Ìå®',
                message: 'ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞Ìï† Ïàò ÏóÜÏäµÎãàÎã§. ÎÑ§Ìä∏ÏõåÌÅ¨Î•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.',
                icon: 'fa-exclamation-circle',
                color: 'red',
                persistent: true,
                actions: [
                    { text: 'Ïû¨ÏãúÎèÑ', action: 'retryConnection' },
                    { text: 'Ïò§ÌîÑÎùºÏù∏ Î™®Îìú', action: 'goOffline' }
                ]
            });
        },

        // ÏïåÎ¶º Ï∂îÍ∞Ä
        addNotification: function(notification) {
            const notificationData = {
                id: Date.now() + Math.random(),
                timestamp: new Date(),
                read: false,
                ...notification
            };

            this.notificationQueue.unshift(notificationData);
            this.notificationHistory.unshift(notificationData);
            this.unreadCount++;

            // ÌûàÏä§ÌÜ†Î¶¨ ÌÅ¨Í∏∞ Ï†úÌïú
            if (this.notificationHistory.length > this.maxHistorySize) {
                this.notificationHistory = this.notificationHistory.slice(0, this.maxHistorySize);
            }

            this.displayNotification(notificationData);
            this.updateNotificationBadge();
            this.triggerNotificationEffects(notificationData);

            // ÏûêÎèô Îã´Í∏∞ ÏÑ§Ï†ïÎêú ÏïåÎ¶º Ï≤òÎ¶¨
            if (notificationData.autoClose) {
                setTimeout(() => {
                    this.removeNotification(notificationData.id);
                }, this.settings.displayDuration);
            }
        },

        // ÏïåÎ¶º ÌëúÏãú
        displayNotification: function(notification) {
            const toast = document.createElement('div');
            toast.className = `notification-toast notification-${notification.priority} fixed top-4 right-4 z-50 max-w-sm animate-in slide-in-from-right-full`;
            toast.dataset.notificationId = notification.id;

            const colorClasses = {
                red: 'bg-red-50 border-red-200 text-red-800',
                orange: 'bg-orange-50 border-orange-200 text-orange-800',
                blue: 'bg-blue-50 border-blue-200 text-blue-800',
                green: 'bg-green-50 border-green-200 text-green-800',
                gray: 'bg-gray-50 border-gray-200 text-gray-800'
            };

            toast.innerHTML = `
                <div class="toast border-2 ${colorClasses[notification.color] || colorClasses.blue}">
                    <div class="flex items-start space-x-3 p-4">
                        <div class="flex-shrink-0">
                            <i class="fas ${notification.icon} text-lg ${this.getIconColor(notification.color)}"></i>
                        </div>
                        <div class="flex-1 min-w-0">
                            <div class="text-sm font-medium">${notification.title}</div>
                            <div class="text-xs mt-1 opacity-90">${notification.message}</div>
                            <div class="text-xs mt-1 opacity-70">${notification.timestamp.toLocaleTimeString('ko-KR')}</div>
                            
                            ${notification.actions ? `
                                <div class="flex gap-2 mt-3">
                                    ${notification.actions.map(action => `
                                        <button onclick="app.advancedNotificationSystem.handleAction('${action.action}', '${notification.id}')" 
                                                class="btn btn-outline btn-sm text-xs">
                                            ${action.text}
                                        </button>
                                    `).join('')}
                                </div>
                            ` : ''}
                        </div>
                        
                        ${!notification.persistent ? `
                            <button onclick="app.advancedNotificationSystem.removeNotification('${notification.id}')" 
                                    class="flex-shrink-0 text-gray-400 hover:text-gray-600">
                                <i class="fas fa-times text-xs"></i>
                            </button>
                        ` : ''}
                    </div>
                </div>
            `;

            document.body.appendChild(toast);

            // Ïï†ÎãàÎ©îÏù¥ÏÖò Ìö®Í≥º
            setTimeout(() => {
                toast.classList.add('animate-in', 'fade-in-0', 'zoom-in-95');
            }, 100);

            // ÏûêÎèô Ï†úÍ±∞ (ÏßÄÏÜçÏ†ÅÏù¥ÏßÄ ÏïäÏùÄ ÏïåÎ¶ºÎßå)
            if (!notification.persistent) {
                setTimeout(() => {
                    this.removeNotification(notification.id);
                }, this.settings.displayDuration);
            }
        },

        // ÏïÑÏù¥ÏΩò ÏÉâÏÉÅ ÌÅ¥ÎûòÏä§ Î∞òÌôò
        getIconColor: function(color) {
            const iconColors = {
                red: 'text-red-600',
                orange: 'text-orange-600',
                blue: 'text-blue-600',
                green: 'text-green-600',
                gray: 'text-gray-600'
            };
            return iconColors[color] || iconColors.blue;
        },

        // ÏïåÎ¶º Ï†úÍ±∞
        removeNotification: function(notificationId) {
            const toast = document.querySelector(`[data-notification-id="${notificationId}"]`);
            if (toast) {
                toast.classList.add('animate-out', 'slide-out-to-right-full');
                setTimeout(() => {
                    toast.remove();
                }, 300);
            }

            // ÌÅêÏóêÏÑú Ï†úÍ±∞
            this.notificationQueue = this.notificationQueue.filter(n => n.id !== notificationId);
        },

        // ÏïåÎ¶º Ïï°ÏÖò Ï≤òÎ¶¨
        handleAction: function(action, notificationId) {
            const notification = this.notificationHistory.find(n => n.id == notificationId);
            
            switch(action) {
                case 'viewComplaint':
                    window.app.loadCivilPage();
                    break;
                case 'handleUrgent':
                    window.app.loadComplaintList('Í∏¥Í∏â');
                    break;
                case 'delegate':
                    window.app.showNotification('ÎØºÏõêÏù¥ Îã¥Îãπ Î∂ÄÏÑúÎ°ú ÏúÑÏûÑÎêòÏóàÏäµÎãàÎã§.');
                    break;
                case 'recordActivity':
                    window.app.showNewActivityModal();
                    break;
                case 'retryConnection':
                    this.connectionStatus.reconnectAttempts = 0;
                    this.attemptReconnection();
                    break;
                case 'goOffline':
                    this.enableOfflineMode();
                    break;
                case 'dismiss':
                    break;
            }

            // ÏïåÎ¶ºÏùÑ ÏùΩÏùåÏúºÎ°ú ÌëúÏãú
            if (notification) {
                notification.read = true;
                this.unreadCount = Math.max(0, this.unreadCount - 1);
                this.updateNotificationBadge();
            }

            this.removeNotification(notificationId);
        },

        // ÏïåÎ¶º Ìö®Í≥º Ìä∏Î¶¨Í±∞
        triggerNotificationEffects: function(notification) {
            // ÏÇ¨Ïö¥Îìú Ïû¨ÏÉù
            if (this.settings.enableSound && notification.priority === 'high') {
                this.playNotificationSound(notification.type);
            }

            // ÏßÑÎèô (Î™®Î∞îÏùº)
            if (this.settings.enableVibration && 'vibrate' in navigator) {
                const vibrationPattern = notification.priority === 'high' ? [100, 50, 100, 50, 100] : [100];
                navigator.vibrate(vibrationPattern);
            }

            // Îç∞Ïä§ÌÅ¨ÌÜ± ÏïåÎ¶º
            if (this.settings.enableDesktop && notification.priority === 'high') {
                this.showDesktopNotification(notification);
            }
        },

        // ÏÇ¨Ïö¥Îìú Ïû¨ÏÉù
        playNotificationSound: function(type) {
            // Web Audio APIÎ•º ÏÇ¨Ïö©Ìïú ÏÇ¨Ïö¥Îìú ÏÉùÏÑ±
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();

            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);

            // ÏïåÎ¶º Ïú†ÌòïÏóê Îî∞Î•∏ ÏÇ¨Ïö¥Îìú Ìå®ÌÑ¥
            const soundPatterns = {
                complaint_urgent: { frequency: 800, duration: 200 },
                complaint_new: { frequency: 600, duration: 150 },
                location_update: { frequency: 400, duration: 100 },
                connection_lost: { frequency: 300, duration: 300 }
            };

            const pattern = soundPatterns[type] || soundPatterns.complaint_new;
            
            oscillator.frequency.setValueAtTime(pattern.frequency, audioContext.currentTime);
            oscillator.type = 'sine';
            
            gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + pattern.duration / 1000);

            oscillator.start(audioContext.currentTime);
            oscillator.stop(audioContext.currentTime + pattern.duration / 1000);
        },

        // Îç∞Ïä§ÌÅ¨ÌÜ± ÏïåÎ¶º ÌëúÏãú
        showDesktopNotification: function(notification) {
            if (Notification.permission === 'granted') {
                const desktopNotification = new Notification(notification.title, {
                    body: notification.message,
                    icon: '/images/logo.png',
                    tag: notification.id,
                    requireInteraction: notification.persistent
                });

                desktopNotification.onclick = () => {
                    window.focus();
                    if (notification.actions && notification.actions[0]) {
                        this.handleAction(notification.actions[0].action, notification.id);
                    }
                    desktopNotification.close();
                };

                // ÏûêÎèô Îã´Í∏∞
                if (!notification.persistent) {
                    setTimeout(() => {
                        desktopNotification.close();
                    }, this.settings.displayDuration);
                }
            }
        },

        // Îç∞Ïä§ÌÅ¨ÌÜ± Í∂åÌïú ÏöîÏ≤≠
        requestDesktopPermission: function() {
            if ('Notification' in window && Notification.permission === 'default') {
                Notification.requestPermission();
            }
        },

        // ÏïåÎ¶º Î∞∞ÏßÄ ÏóÖÎç∞Ïù¥Ìä∏
        updateNotificationBadge: function() {
            const badge = document.getElementById('notificationBadge');
            if (badge) {
                if (this.unreadCount > 0) {
                    badge.textContent = this.unreadCount > 99 ? '99+' : this.unreadCount;
                    badge.classList.remove('hidden');
                } else {
                    badge.classList.add('hidden');
                }
            }
        },

        // Ïò§ÌîÑÎùºÏù∏ Î™®Îìú ÌôúÏÑ±Ìôî
        enableOfflineMode: function() {
            this.connectionStatus.connected = false;
            window.app.showNotification('Ïò§ÌîÑÎùºÏù∏ Î™®ÎìúÎ°ú Ï†ÑÌôòÎêòÏóàÏäµÎãàÎã§. ÏùºÎ∂Ä Í∏∞Îä•Ïù¥ Ï†úÌïúÎê©ÎãàÎã§.', 'warning');
        },

        // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï
        setupEventListeners: function() {
            // ÌéòÏù¥ÏßÄ Í∞ÄÏãúÏÑ± Î≥ÄÍ≤Ω Í∞êÏßÄ
            document.addEventListener('visibilitychange', () => {
                if (document.visibilityState === 'visible' && this.unreadCount > 0) {
                    // ÌéòÏù¥ÏßÄÍ∞Ä Îã§Ïãú Î≥¥Ïùº Îïå ÏùΩÏßÄ ÏïäÏùÄ ÏïåÎ¶º ÌëúÏãú
                    this.showUnreadNotificationsSummary();
                }
            });

            // Ïò®ÎùºÏù∏/Ïò§ÌîÑÎùºÏù∏ ÏÉÅÌÉú Í∞êÏßÄ
            window.addEventListener('online', () => {
                if (!this.connectionStatus.connected) {
                    this.onReconnectionSuccess();
                }
            });

            window.addEventListener('offline', () => {
                this.simulateConnectionLoss();
            });
        },

        // ÏùΩÏßÄ ÏïäÏùÄ ÏïåÎ¶º ÏöîÏïΩ ÌëúÏãú
        showUnreadNotificationsSummary: function() {
            if (this.unreadCount === 0) return;

            const content = `
                <div class="space-y-4">
                    <div class="text-center">
                        <div class="text-lg font-bold">${this.unreadCount}Í∞úÏùò ÏùΩÏßÄ ÏïäÏùÄ ÏïåÎ¶º</div>
                        <div class="text-sm text-muted-foreground">Î∂ÄÏû¨ Ï§ë Î∞õÏùÄ ÏïåÎ¶ºÏûÖÎãàÎã§</div>
                    </div>
                    
                    <div class="max-h-64 overflow-y-auto space-y-2">
                        ${this.notificationHistory
                            .filter(n => !n.read)
                            .slice(0, 5)
                            .map(n => `
                                <div class="flex items-center space-x-3 p-2 bg-muted rounded-lg">
                                    <i class="fas ${n.icon} ${this.getIconColor(n.color)}"></i>
                                    <div class="flex-1">
                                        <div class="text-sm font-medium">${n.title}</div>
                                        <div class="text-xs text-muted-foreground">${n.timestamp.toLocaleTimeString('ko-KR')}</div>
                                    </div>
                                </div>
                            `).join('')}
                    </div>
                </div>
            `;

            window.app.showModal('unread-notifications', {
                title: 'ÏùΩÏßÄ ÏïäÏùÄ ÏïåÎ¶º',
                content: content,
                confirmText: 'Î™®Îëê ÏùΩÏùå',
                cancelText: 'Îã´Í∏∞',
                onConfirm: () => {
                    this.markAllAsRead();
                }
            });
        },

        // Î™®Îì† ÏïåÎ¶ºÏùÑ ÏùΩÏùåÏúºÎ°ú ÌëúÏãú
        markAllAsRead: function() {
            this.notificationHistory.forEach(n => n.read = true);
            this.unreadCount = 0;
            this.updateNotificationBadge();
            window.app.closeModal();
        },

        // ÏÑ§Ï†ï Î°úÎìú
        loadSettings: function() {
            const savedSettings = localStorage.getItem('notificationSettings');
            if (savedSettings) {
                this.settings = { ...this.settings, ...JSON.parse(savedSettings) };
            }
        },

        // ÏÑ§Ï†ï Ï†ÄÏû•
        saveSettings: function() {
            localStorage.setItem('notificationSettings', JSON.stringify(this.settings));
        },

        // Î©îÏãúÏßÄ ÏÉùÏÑ± Ìï®ÏàòÎì§
        generateComplaintMessage: function() {
            const messages = [
                'ÎèÑÎ°ú Ìè¨Ìä∏ÌôÄ Í¥ÄÎ†® ÎØºÏõêÏù¥ Ï†ëÏàòÎêòÏóàÏäµÎãàÎã§.',
                'Í∞ÄÎ°úÎì± Í≥†Ïû• Ïã†Í≥†Í∞Ä Îì§Ïñ¥ÏôîÏäµÎãàÎã§.',
                'ÏÜåÏùå Í¥ÄÎ†® ÎØºÏõêÏù¥ Îì±Î°ùÎêòÏóàÏäµÎãàÎã§.',
                'ÌôòÍ≤Ω Í∞úÏÑ† ÏöîÏ≤≠Ïù¥ Ï†ëÏàòÎêòÏóàÏäµÎãàÎã§.',
                'ÍµêÌÜµ Ïã†Ìò∏ Í¥ÄÎ†® ÎØºÏõêÏù¥ Îì§Ïñ¥ÏôîÏäµÎãàÎã§.'
            ];
            return messages[Math.floor(Math.random() * messages.length)];
        },

        generateSystemMessage: function() {
            const messages = [
                'ÏãúÏä§ÌÖúÏù¥ Ï†ïÏÉÅ ÎèôÏûë Ï§ëÏûÖÎãàÎã§.',
                'Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Î∞±ÏóÖÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.',
                'Î≥¥Ïïà ÏóÖÎç∞Ïù¥Ìä∏Í∞Ä Ï†ÅÏö©ÎêòÏóàÏäµÎãàÎã§.',
                'ÏÑúÎ≤Ñ ÏÑ±Îä•Ïù¥ ÏµúÏ†ÅÌôîÎêòÏóàÏäµÎãàÎã§.',
                'ÏÉàÎ°úÏö¥ Í∏∞Îä•Ïù¥ ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§.'
            ];
            return messages[Math.floor(Math.random() * messages.length)];
        }
    },

    // ÏïåÎ¶º ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî (Ïï± ÏãúÏûë Ïãú Ìò∏Ï∂ú)
    initAdvancedNotifications: function() {
        if (!this.advancedNotificationSystem.initialized) {
            this.advancedNotificationSystem.initialize();
            this.advancedNotificationSystem.initialized = true;
        }
    }
});